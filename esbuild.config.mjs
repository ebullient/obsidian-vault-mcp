import esbuild from "esbuild";
import process from "node:process";
import builtins from 'builtin-modules';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');
const dir = prod || !process.env.OUTDIR ? "./build" : process.env.OUTDIR;

// Plugin build configuration
const pluginParams = {
    banner: {
        js: banner,
    },
    entryPoints: ['src/main.ts', 'src/styles.css'],
    bundle: true,
    external: [
        'obsidian',
        'electron',
        'moment',
        ...builtins
    ],
    format: 'cjs',
    logLevel: 'info',
    target: 'es2020',
    treeShaking: true,
    sourcemap: prod ? false : 'inline',
    minify: prod,
    outdir: dir,
};

// Bridge build configuration (standalone Node.js script)
const bridgeParams = {
    banner: {
        js: '#!/usr/bin/env node\n' + banner,
    },
    entryPoints: ['src/mcp-bridge.ts'],
    bundle: true,
    platform: 'node',
    external: [...builtins],
    format: 'cjs',
    logLevel: 'info',
    target: 'node18',
    treeShaking: true,
    sourcemap: prod ? false : 'inline',
    minify: prod,
    outfile: `${dir}/mcp-bridge.js`,
};

if (prod) {
    await Promise.all([
        esbuild.build(pluginParams),
        esbuild.build(bridgeParams)
    ]).catch((x) => {
        if (x.errors) {
            console.error(x.errors);
        } else {
            console.error(x);
        }
        process.exit(1)
    });
} else {
    const pluginCtx = await esbuild.context(pluginParams);
    const bridgeCtx = await esbuild.context(bridgeParams);
    await Promise.all([
        pluginCtx.watch(),
        bridgeCtx.watch()
    ]);
}
